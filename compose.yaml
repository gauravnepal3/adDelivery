services:
  java-app:
    build: .
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - JAVA_TOOL_OPTIONS=
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=50
        -XX:+AlwaysPreTouch
        -XX:+PerfDisableSharedMem
        -Xms2g -Xmx2g
        -XX:ActiveProcessorCount=0
    ports:
      - "8080:8080"   # NOTE: with host networking this is not needed
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    network_mode: host   # ✅ use host network, bypass Docker bridge

  redis:
    image: redis:7-alpine
    container_name: redis
    command:
      - redis-server
      - --save ""
      - --appendonly no
      - --tcp-backlog 511
      - --timeout 0
      - --tcp-keepalive 60
      - --requirepass ${REDIS_PASSWORD}
      - --maxclients 50000
      - --io-threads 4
      - --io-threads-do-reads yes
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host   # ✅ host networking

  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: prod_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host   # ✅ host networking

volumes:
  postgres_data:
  redis_data:
  letsencrypt: