services:
  java-app:
    build: .
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      - JAVA_TOOL_OPTIONS=
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=50
        -XX:+AlwaysPreTouch
        -XX:+PerfDisableSharedMem
        -Xms2g -Xmx2g
        -XX:ActiveProcessorCount=10
    ports:
      - "8080:8080"
    networks:
      - mynetwork
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # (optional) simple healthcheck so depends_on works reliably
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    command:
      - redis-server
      - --save ""
      - --appendonly no
      - --tcp-backlog 511
      - --timeout 0
      - --tcp-keepalive 60
      - --requirepass ${REDIS_PASSWORD}
      - --maxclients 20000
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    ulimits:
      nofile:
        soft: 200000
        hard: 200000
    sysctls:
      net.core.somaxconn: "65535"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - redis_data:/data
  postgres:
    image: 'postgres:15-alpine'
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: prod_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  letsencrypt:

networks:
  mynetwork:
    driver: bridge