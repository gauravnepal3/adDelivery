services:
  java-app:
    build: .
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: "8080"                      # app listens on 8080
      # point Spring to localhost (host network)
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/prod_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_DATA_REDIS_HOST: localhost
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD}
      # optional: avoid dialect auto-detection on first boot
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      JAVA_TOOL_OPTIONS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: "20"
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE: "500"
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES: "true"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    network_mode: host

  redis:
    image: redis:7-alpine
    command:
      - redis-server
      - --save ""
      - --appendonly no
      - --tcp-backlog 511
      - --timeout 0
      - --tcp-keepalive 60
      - --requirepass ${REDIS_PASSWORD}
      - --maxclients 50000
      - --io-threads 4
      - --io-threads-do-reads yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: prod_db
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    network_mode: host

volumes:
  postgres_data: